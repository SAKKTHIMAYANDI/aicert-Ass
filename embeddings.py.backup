# SOLUTION 1: Update your VectorDB to use the correct collection name
# Update your embedding.py file

import faiss
import numpy as np
import openai
from pymongo import MongoClient
from config import Config
import pickle
import os
from typing import Dict, List
from datetime import datetime
from bson import ObjectId

openai.api_key = Config.OPENAI_API_KEY
EMBEDDING_MODEL = "text-embedding-3-small"

class VectorDB:
    def __init__(self):
        self.dimension = 1536
        self.index = faiss.IndexFlatL2(self.dimension)
        self.id_to_doc = {}
        self.client = MongoClient(Config.MONGO_URI)
        self.db = self.client[Config.DB_NAME]
        
        # ‚úÖ FIX: Use the correct collection name
        self.documents = self.db.fastapi_auth_coll  # Changed from self.db.documents
        
        # Ensure models directory exists
        if not os.path.exists("models"):
            os.makedirs("models")
            print("üìÅ Created models directory")
        
        self._load_index()
        
        print(f"[FAISS] Initialized. Total vectors: {self.index.ntotal}")
        print(f"[FAISS] Mapped docs: {len(self.id_to_doc)}")
        
        # Auto-rebuild if empty but MongoDB has documents
        self._auto_rebuild_if_needed()

    def _get_embedding(self, text: str) -> List[float]:
        """Get embedding from OpenAI API with error handling"""
        try:
            response = openai.embeddings.create(
                input=text,
                model=EMBEDDING_MODEL
            )
            return response.data[0].embedding
        except Exception as e:
            print(f"‚ùå Error getting embedding: {str(e)}")
            raise

    def add_document(self, text: str, metadata: Dict) -> str:
        """Add document to both MongoDB and FAISS index"""
        print("üìÑ Adding document to FAISS and MongoDB")
        
        if not text or not text.strip():
            raise ValueError("Text content cannot be empty")

        # ‚úÖ FIX: Use 'content' field to match your existing data structure
        doc_data = {
            "content": text,  # Changed from "text" to "content"
            "metadata": metadata,
            "created_at": datetime.now()
        }

        try:
            doc_id = str(self.documents.insert_one(doc_data).inserted_id)
            print(f"‚úÖ Inserted into MongoDB with ID: {doc_id}")
        except Exception as e:
            print(f"‚ùå MongoDB insertion failed: {str(e)}")
            raise

        # Generate embedding and add to FAISS
        try:
            embedding = self._get_embedding(text)
            embedding = np.array(embedding).astype('float32').reshape(1, -1)

            faiss_id = self.index.ntotal
            self.index.add(embedding)
            self.id_to_doc[faiss_id] = doc_id

            print(f"‚úÖ FAISS ID {faiss_id} added ‚Üí maps to doc ID {doc_id}")

            # Save immediately after each addition
            self._save_index()
            print("üíæ Index and mapping saved to disk")

            return doc_id
            
        except Exception as e:
            # If FAISS addition fails, remove from MongoDB to maintain consistency
            print(f"‚ùå FAISS addition failed: {str(e)}")
            self.documents.delete_one({"_id": ObjectId(doc_id)})
            raise

    def search(self, query: str, k: int = 5, document_ids: List[str] = None) -> List[Dict]:
        """Search documents with improved debugging and filtering"""
        print(f"üîç Searching for query: '{query}'")
        print(f"üìÑ Filter by document_ids: {document_ids}")
        print(f"üìä FAISS index status: {self.index.ntotal} vectors, {len(self.id_to_doc)} mappings")
        
        # Check if index is empty
        if self.index.ntotal == 0:
            print("‚ö†Ô∏è FAISS index is empty! No documents to search.")
            return []
        
        # Validate document_ids if provided
        if document_ids:
            available_docs = set(self.id_to_doc.values())
            requested_docs = set(str(d) for d in document_ids)
            intersection = available_docs.intersection(requested_docs)
            
            print(f"üìã Available in FAISS: {sorted(available_docs)}")
            print(f"üìã Requested: {sorted(requested_docs)}")
            print(f"üìã Intersection: {sorted(intersection)}")
            
            if not intersection:
                print("‚ö†Ô∏è None of the requested documents are in the FAISS index")
                return []

        try:
            # Get query embedding
            query_embedding = self._get_embedding(query)
            query_embedding = np.array(query_embedding).astype('float32').reshape(1, -1)

            # Search FAISS index
            distances, indices = self.index.search(query_embedding, min(k, self.index.ntotal))
            print(f"üìè Distances: {distances[0][:5]}")  # Show first 5
            print(f"üî¢ Indices: {indices[0][:5]}")      # Show first 5

            results = []

            for rank, (idx, distance) in enumerate(zip(indices[0], distances[0])):
                if idx == -1:  # No more results
                    continue
                
                if idx not in self.id_to_doc:
                    print(f"‚ö†Ô∏è FAISS index {idx} not found in mapping")
                    continue

                doc_id = self.id_to_doc[idx]
                print(f"‚Üí Rank {rank}: FAISS ID {idx} ‚Üí MongoDB ID {doc_id}")

                # Filter by document_ids if specified
                if document_ids and doc_id not in [str(d) for d in document_ids]:
                    print(f"  ‚õî Skipped (not in requested document_ids)")
                    continue

                # Fetch from MongoDB
                try:
                    mongo_doc = self.documents.find_one({"_id": ObjectId(doc_id)})
                    if not mongo_doc:
                        print(f"  ‚ö†Ô∏è Document {doc_id} not found in MongoDB")
                        continue

                    # ‚úÖ FIX: Look for both 'content' and 'text' fields
                    text_content = mongo_doc.get("content") or mongo_doc.get("text")
                    if not text_content:
                        print(f"  ‚ö†Ô∏è Document {doc_id} has no text/content")
                        continue

                    results.append({
                        "text": text_content,  # Return as 'text' for consistency with RAG system
                        "metadata": mongo_doc.get("metadata", {}),
                        "score": float(distance),
                        "document_id": doc_id
                    })
                    print(f"  ‚úÖ Added to results (score: {distance:.4f})")

                except Exception as e:
                    print(f"  ‚ùå Error fetching document {doc_id}: {str(e)}")
                    continue

            print(f"‚úÖ Search completed: {len(results)} results found")
            return results

        except Exception as e:
            print(f"‚ùå Search error: {str(e)}")
            return []

    def _save_index(self):
        """Save FAISS index and mapping to disk"""
        try:
            faiss.write_index(self.index, "models/faiss_index.bin")
            with open("models/faiss_mapping.pkl", "wb") as f:
                pickle.dump(self.id_to_doc, f)
            print("üíæ Index and mapping saved successfully")
        except Exception as e:
            print(f"‚ùå Error saving index: {str(e)}")
            raise

    def _load_index(self):
        """Load FAISS index and mapping from disk"""
        try:
            if os.path.exists("models/faiss_index.bin") and os.path.exists("models/faiss_mapping.pkl"):
                self.index = faiss.read_index("models/faiss_index.bin")
                with open("models/faiss_mapping.pkl", "rb") as f:
                    self.id_to_doc = pickle.load(f)
                print("‚úÖ Loaded FAISS index and mapping from disk")
            else:
                print("‚ÑπÔ∏è No existing FAISS index found ‚Äî starting fresh")
        except Exception as e:
            print(f"‚ö†Ô∏è Error loading index: {str(e)} ‚Äî starting fresh")
            self.index = faiss.IndexFlatL2(self.dimension)
            self.id_to_doc = {}

    def _auto_rebuild_if_needed(self):
        """Auto-rebuild FAISS index if it's empty but MongoDB has documents"""
        if self.index.ntotal == 0:
            mongo_count = self.documents.count_documents({})
            if mongo_count > 0:
                print(f"üîÑ FAISS index empty but MongoDB has {mongo_count} documents. Auto-rebuilding...")
                self.rebuild_index()

    def rebuild_index(self) -> int:
        """Rebuild FAISS index from all MongoDB documents"""
        print("‚ôªÔ∏è Rebuilding FAISS index from MongoDB...")
        
        # Reset index and mapping
        self.index = faiss.IndexFlatL2(self.dimension)
        self.id_to_doc = {}
        
        docs_processed = 0
        docs_failed = 0
        
        try:
            total_docs = self.documents.count_documents({})
            print(f"üìÑ Found {total_docs} documents in MongoDB collection: fastapi_auth_coll")
            
            for doc in self.documents.find():
                try:
                    # ‚úÖ FIX: Look for both 'content' and 'text' fields
                    text = doc.get("content") or doc.get("text")
                    if not text or not text.strip():
                        print(f"‚ö†Ô∏è Skipping {doc['_id']} - no text/content")
                        docs_failed += 1
                        continue
                    
                    # Generate embedding
                    embedding = self._get_embedding(text)
                    embedding = np.array(embedding).astype('float32').reshape(1, -1)
                    
                    # Add to FAISS
                    faiss_id = self.index.ntotal
                    self.index.add(embedding)
                    self.id_to_doc[faiss_id] = str(doc["_id"])
                    
                    docs_processed += 1
                    if docs_processed % 10 == 0:  # Progress update every 10 docs
                        print(f"üìà Progress: {docs_processed}/{total_docs} documents processed")
                    
                except Exception as e:
                    print(f"‚ùå Error processing {doc.get('_id', 'unknown')}: {str(e)}")
                    docs_failed += 1
                    continue
            
            # Save the rebuilt index
            self._save_index()
            
            print(f"‚úÖ Rebuild complete!")
            print(f"  üìä Processed: {docs_processed}")
            print(f"  ‚ùå Failed: {docs_failed}")
            print(f"  üî¢ Total vectors: {self.index.ntotal}")
            
            return docs_processed
            
        except Exception as e:
            print(f"‚ùå Rebuild failed: {str(e)}")
            raise

    def get_stats(self) -> Dict:
        """Get current statistics"""
        mongo_count = self.documents.count_documents({})
        return {
            "faiss_vectors": self.index.ntotal,
            "mapping_entries": len(self.id_to_doc),
            "mongodb_documents": mongo_count,
            "index_dimension": self.index.d,
            "collection_name": "fastapi_auth_coll"
        }

# SOLUTION 2: Quick Test Script
# Save this as test_fixed_system.py

def test_fixed_system():
    """Test the fixed system with your actual document"""
    print("üß™ Testing fixed RAG system...")
    
    # Initialize the fixed VectorDB
    vector_db = FixedVectorDB()
    
    # Show stats
    stats = vector_db.get_stats()
    print(f"üìä Stats: {stats}")
    
    # Test with your actual document ID
    test_doc_id = "684acd5357ad72463648c473"
    test_query = "hi"
    
    print(f"\nüîç Testing search:")
    print(f"  Query: '{test_query}'")
    print(f"  Document ID: {test_doc_id}")
    
    # Search
    results = vector_db.search(test_query, document_ids=[test_doc_id])
    
    if results:
        print(f"‚úÖ SUCCESS! Found {len(results)} results")
        for i, result in enumerate(results):
            print(f"  Result {i+1}:")
            print(f"    Score: {result['score']:.4f}")
            print(f"    Document ID: {result['document_id']}")
            print(f"    Text: {result['text'][:100]}...")
            print(f"    Metadata: {result['metadata']}")
    else:
        print("‚ùå No results found")
    
    return len(results) > 0

if __name__ == "__main__":
    success = test_fixed_system()
    if success:
        print("\nüéâ Your RAG system is now working!")
    else:
        print("\n‚ùå Still having issues. Check the debug output above.")